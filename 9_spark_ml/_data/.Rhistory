#attributes
attributes(iris)
#head
head(iris)
#tail
tail(iris)
#summary
summary(iris)
#quantile
quantile(iris$Sepal.Length)
#table
pie(table(iris$Species))
#density
density(iris$Sepal.Length)
#levels : 몇 종류 인가?
levels(iris$Species)
#cov : 공분산
cov(rnorm(10000),rnorm(10000))
cov(iris$Sepal.Length, iris$Petal.Length)
cov(iris[,1:4])
#cor : 상관분석
cor(iris[,1:4])
#aggregate : 통계 요약
aggregate(Sepal.Length ~ Species, summary, data=iris)
#boxplot : 최대 최소 평균
boxplot(Sepal.Length~Species, data=iris)
#with : 인자별 scatter Plot을 보여줌
with(iris, plot(Sepal.Length, Sepal.Width, col=Species, pch=as.numeric(Species)))
#jitter : 겹치는 것 방지를 위해 노이즈를 줌
with(iris, plot(jitter(Sepal.Length), jitter(Sepal.Width), col=Species, pch=as.numeric(Species)))
#pairs :
pairs(cbind(1:10,seq(10,1,-1),(1:10)^3))
pairs(iris)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
#scatterplot3d
library(scatterplot3d)
z <- seq(-10, 10, 0.01);x <- cos(z);y <- sin(z)
scatterplot3d(x, y, z)
scatterplot3d(x, y, z, highlight.3d=TRUE, col.axis="blue",
col.grid="lightblue", main="scatterplot3d - 1", pch=20)
scatterplot3d(iris$Petal.Width, iris$Sepal.Length, iris$Sepal.Width)
#levelplot
install.packages("lattice")
library(lattice)
print(levelplot(b~a*b,df))
df=data.frame(a=1:10,b=1:10)
print(levelplot(Petal.Width~Sepal.Length*Sepal.Width, iris))
#contour
v=matrix(c(1:10000),100,100)
for(x in 1:100)
for(y in 1:100)
v[x,y]<- sin(x/100*pi)+sin(y/100*pi)
filled.contour(v,plot.axes=contour(v, add=T))
filled.contour(volcano, color=terrain.colors, asp=1,plot.axes=contour(volcano, add=T))
#persp
persp(v,theta=45,phi=30)
persp(volcano, theta = 25, phi = 30, expand = 0.5, col = "lightblue")
#plot3d
install.packages("rgl")
plot3d(iris$Petal.Width, iris$Sepal.Length, iris$Sepal.Width)
persp(v,theta=45,phi=30)
?plot
require(stats) # for lowess, rpois, rnorm
plot(cars)
cars
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(rpois(100, 5)))
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(rpois(100, 5)))
plot(table(rpois(100, 5)))
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(rpois(100, 5)), type = "h")
plot(table(rpois(100, 5)), col = "red")
plot(table(rpois(100, 5)), col = "blue")
plot(table(rpois(100, 5)), lwd = 10)
?plot
plot(table(rpois(100, 5)), lwd = 10, type = "l")
remove.packages("party")
library(party)
install.packages("party")
library(party)
set.seed(1234)
#모델을 생성하기 위한 집단과 평가를 위한 집단을 분리하기 위해서
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
#install.packages("party")
library(party)
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
table(predict(iris_ctree), trainData$Species)
#결과 출력
print(iris_ctree)
plot(iris_ctree)
# 꽃잎의 길이가 1.9이하면 setosa
v=c(1,2,3,1)
v=c(1,2,3,1)
plot(v)
plot(v,type='h')
plot(v,type='h',col="red")
plot(v,type='h',col=c("red","blue"))
v=c(3,2,3,4)
plot(v,type='h',col=c("red","blue"))
v=c(3,2,3,4,0)
plot(v,type='h',col=c("red","blue"))
rainbow(10)
rainbow(7)
q()
plot.new()
par(mfrow=c(1,1))
x <- c(1,2,3,4,5)
y <- c(20,22,23,21,25)
plot(x,y)
plot(x,y,main="plot의 예제",xlab="키",ylab="몸무게")
plot(x,y,main="plot의 예제",xlab="키",ylab="몸무게",type='l')
edu <- c(2,2,5,3,3,3,4,3,4,3)
x=c(1,2,3)
x[1]
sav a
exit
iris
x=3
x
y=4
x+y
getwd()
write.csv(iris,"iris.csv")
x
write.csv(x,"x.csv")
require(stats) # for lowess, rpois, rnorm
plot(cars)
lines(lowess(cars))
plot(sin, -pi, 2*pi) # see ?plot.function
## Discrete Distribution Plot:
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
## Simple quantiles/ECDF, see ecdf() {library(stats)} for a better one:
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
require(stats) # for lowess, rpois, rnorm
cars
plot(cars)
lines(lowess(cars))
plot(sin, -pi, 2*pi) # see ?plot.function
## Discrete Distribution Plot:
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
i=read.csv("iris.csv")
i
i=read.csv("iris.csv")
i
print("dfd
dfjkdfjk
")"
)
""
print("dfd
kdjfkd")
??plo
dim(iris)
names(iris)
str(iris)
?str
attributes(iris)
#head
head(iris)
#tail
tail(iris)
#summary
summary(iris)
#quantile
quantile(iris$Sepal.Length)
pie(table(iris$Species))
#density
density(iris$Sepal.Length)
#levels : 몇 종류 인가?
levels(iris$Species)
cov(rnorm(10000),rnorm(10000))
cov(iris$Sepal.Length, iris$Petal.Length)
cov(iris[,1:4])
#cor : 상관분석
cor(iris[,1:4])
#aggregate : 통계 요약
aggregate(Sepal.Length ~ Species, summary, data=iris)
boxplot(Sepal.Length~Species, data=iris)
with(iris, plot(Sepal.Length, Sepal.Width, col=Species, pch=as.numeric(Species)))
#jitter : 겹치는 것 방지를 위해 노이즈를 줌
with(iris, plot(jitter(Sepal.Length), jitter(Sepal.Width), col=Species, pch=as.numeric(Species)))
#pairs :
pairs(cbind(1:10,seq(10,1,-1),(1:10)^3))
pairs(iris)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
pairs(cbind(1:10,seq(10,1,-1),(1:10)^3))
pairs(iris)
pairs(cbind(1:10,seq(10,1,-1),(1:10)^3))
pairs(iris)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
pairs(cbind(1:10,seq(10,1,-1),(1:10)^3))
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
z <- seq(-10, 10, 0.01);x <- cos(z);y <- sin(z)
scatterplot3d(x, y, z)
library("scatterplot3d", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages("scatterplot3d")
install.packages("scatterplot3d")
library("scatterplot3d", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
z <- seq(-10, 10, 0.01);x <- cos(z);y <- sin(z)
scatterplot3d(x, y, z)
scatterplot3d(x, y, z, highlight.3d=TRUE, col.axis="blue",
col.grid="lightblue", main="scatterplot3d - 1", pch=20)
scatterplot3d(iris$Petal.Width, iris$Sepal.Length, iris$Sepal.Width)
library(lattice)
print(levelplot(b~a*b,df))
df=data.frame(a=1:10,b=1:10)
print(levelplot(Petal.Width~Sepal.Length*Sepal.Width, iris))
#contour
v=matrix(c(1:10000),100,100)
for(x in 1:100)
for(y in 1:100)
v[x,y]<- sin(x/100*pi)+sin(y/100*pi)
filled.contour(v,plot.axes=contour(v, add=T))
filled.contour(volcano, color=terrain.colors, asp=1,plot.axes=contour(volcano, add=T))
persp(v,theta=45,phi=30)
persp(volcano, theta = 25, phi = 30, expand = 0.5, col = "lightblue")
#plot3d
install.packages("rgl")
library(rgl)
plot3d(iris$Petal.Width, iris$Sepal.Length, iris$Sepal.Width)
persp(v,theta=45,phi=30)
x=1:100
y=2*x+30
cor(x,y)
plot(d)
d=cbind(x,y)
plot(d)
x=1:100
y=2*x+30
#y[50]=150
cor(x,y)
d=cbind(x,y)
plot(d)
lm(y~x)
y[50]=150
cor(x,y)
d=cbind(x,y)
plot(d)
lm(y~x)
ft=c(156,159,168,177,183,183,192)
st=c(166,166,169,175,183,186,187)
cor(ft,st)
d=cbind(ft,st,rep(1,length(ft)))
plot(d)
m=lm(st~ft)
m
tft=seq(156,192)       #seq(min(ft),max(ft))
tst=0.667*tft+60
predict(m,newdata=data.frame(ft=155))
predict(m,newdata=data.frame(ft=167))
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
dim(trainData)
library(party)
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
iris_ctree <- ctree(myFormula, data=trainData)
table(predict(iris_ctree), trainData$Species)
print(iris_ctree)
plot(iris_ctree)
# 꽃잎의 길이가 1.9이하면 setosa
# 꽃입의 넓이가 1.7보다 크면 versinica
# 나머지는 versicolor이다.
testPred <- predict(iris_ctree, newdata = testData)
table(testPred, testData$Species)
?plot
require(stats) # for lowess, rpois, rnorm
plot(cars)
lines(lowess(cars))
plot(sin, -pi, 2*pi) # see ?plot.function
## Discrete Distribution Plot:
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
## Simple quantiles/ECDF, see ecdf() {library(stats)} for a better one:
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
require(stats) # for lowess, rpois, rnorm
plot(cars)
lines(lowess(cars))
plot(sin, -pi, 2*pi) # see ?plot.function
## Discrete Distribution Plot:
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
## Simple quantiles/ECDF, see ecdf() {library(stats)} for a better one:
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
install.packages("aruls")
set.seed(1234)
iris2 <- iris
iris2 <- iris
iris2$Species <- NULL
iris
iris
iris
iris2
(kmeans.result <- kmeans(iris2, 3))
table(iris$Species, kmeans.result$cluster)
plot(iris2[,c("Sepal.Length", "Sepal.Width")], col = kmeans.result$cluster)
(kmeans.result <- kmeans(iris2, 3))
table(iris$Species, kmeans.result$cluster)
plot(iris2[,c("Sepal.Length", "Sepal.Width")], col = kmeans.result$cluster)
plot(iris2[,c("Sepal.Length", "Sepal.Width")], col = kmeans.result$cluster)
plot(iris2[,c("Sepal.Length", "Sepal.Width")], col = kmeans.result$cluster)
points(kmeans.result$centers[,c("Sepal.Length", "Sepal.Width")], col = 1:3, pch = 8, cex=2)
?matrix
?matr
??matr
?write.csv
?plot
require(stats) # for lowess, rpois, rnorm
plot(cars)
lines(lowess(cars))
plot(sin, -pi, 2*pi) # see ?plot.function
## Discrete Distribution Plot:
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
## Simple quantiles/ECDF, see ecdf() {library(stats)} for a better one:
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(table(rpois(100, 5)), type = "l", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
#dim
dim(iris)
#names
iris
iris
dim(iris)
#names
names(iris)
#str : structure
str(iris)
#attributes
attributes(iris)
#head
head(iris)
#tail
tail(iris)
#summary
summary(iris)
#quantile
quantile(iris$Sepal.Length)
#table
pie(table(iris$Species))
#density
density(iris$Sepal.Length)
#levels : 몇 종류 인가?
levels(iris$Species)
#cov : 공분산
cov(rnorm(10000),rnorm(10000))
cov(iris$Sepal.Length, iris$Petal.Length)
cov(iris[,1:4])
#cor : 상관분석
cor(iris[,1:4])
#aggregate : 통계 요약
aggregate(Sepal.Length ~ Species, summary, data=iris)
#boxplot : 최대 최소 평균
boxplot(Sepal.Length~Species, data=iris)
library("party", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
pairs(cbind(1:10,seq(10,1,-1),(1:10)^3))
pairs(iris)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
plot(c(1,2,3,2))
plot(c(1,2,3,2),type='l')
plot(c(1,2,3,2),type='b')
plot(c(1,2,3,2),type='b',col="red")
plot(c(1,2,3,2),type=c('b'),col=c("red") )
plot(c(1,2,3,2),type=c('b'),col=c("red","blue") )
plot(c(1,2,3,2),type=c('b'),col=c("red","blue","yellow","green") )
install.packages("rgl")
remove.packages("rgl")
library(rgl)
install.packages("rgl")
library(rgl)
plot3d(iris$Petal.Width, iris$Sepal.Length, iris$Sepal.Width)
install.packages("ggmap")
library(ggmap)
getmap <- get_googlemap('seoul')
ggmap(getmap)
getmap <- get_googlemap('gangnamgu', zoom=12)
ggmap(getmap)
library(ggmap)
install.packages("ggmap")
library(ggmap)
install.packages("RJSONIO")
library(ggmap)
getmap <- get_googlemap('seoul')
ggmap(getmap)
getmap <- get_googlemap('gangnamgu', zoom=12)
ggmap(getmap)
location.info <- data.frame(
Name=c("강남","양재","양재시민의숲","청계산입구","판교","정자"),
lon=c(127.028046,127.035140,127.038451,127.054769,127.111172,127.108367),
lat=c(37.497001,37.483368,37.469655,37.448196,37.394786,37.366777)
)
getmap <- get_googlemap('gwacheon', zoom=11)
p <- ggmap(getmap) + geom_point(aes(x=lon, y=lat), data=location.info)
p + geom_text(aes(label=Name), data=location.info, size=4, hjust=1.2,
fontface="bold") + geom_path(aes(x=lon, y=lat), color="blue", alpha=.5, lwd=1, data=location.info)
x=1:100
y=2*x+30
cor(x,y)
d=cbind(x,y)
str(d)
class(d)
plot(d)
lm(y~x)
x=1:100
y=2*x+30
y[50]=150
cor(x,y)
d=cbind(x,y)
plot(d)
lm(y~x)
ft=c(156,159,168,177,183,183,192)
st=c(166,166,169,175,183,186,187)
cor(ft,st)
d=cbind(ft,st,rep(1,length(ft)))
plot(d)
m=lm(st~ft)
m
predict(m,newdata=data.frame(ft=167))
lm(y~x)
tft=seq(156,192)       #seq(min(ft),max(ft))
tst=0.667*tft+60
td=cbind(tft,tst,rep(2,length(tft)))
td
ret=rbind(d,td)
plot(ret,pch = 21,bg = c("red", "green3")[ret[,3]])
predict(m,newdata=data.frame(ft=155))
ptft=seq(156,192)
ptst=predict(m,newdata=data.frame(ft=seq(156,192)))
ptd=cbind(ptft,ptst,rep(2,length(tft)))
pret=rbind(d,ptd)
plot(pret,pch = 21,bg = c("red", "green3")[pret[,3]])
summary(m)
predict(m,newdata=data.frame(ft=c(120,210))
)
install.packages("arules")
install.packages("Matrix")
library("arules")
setwd("/Dropbox/201708_Miracom_ML/_src/_R/AssociationRule/")
asso=read.table("ex421.txt",header=T ,fileEncoding = "EUC-KR")
asso
trans<-as.matrix(asso,"Transaction")
rules1<-apriori(trans,parameter=list(supp=0.4,conf=0.6,  target="rules"))
rules1
inspect(sort(rules1))
trans<-as.matrix(asso,"Transaction")
rules1<-apriori(trans,parameter=list(supp=0.4,conf=0.6,  target="rules"))
rules1
inspect(sort(rules1))
as(rules1, "data.frame");
rules2<-apriori(trans,parameter=list(suppor=0.6))
#?????? ?????? 결과??? ???거?????? ????????? ???쪽 ????????? ?????? ?????? 결과?????? ???-
rules2.sub_1=subset(rules1,subset=lhs %pin% ""  & lift>0.6)
inspect(sort( rules2.sub_1)[1:3])
set.seed(1234)
#모델을 생성하기 위한 집단과 평가를 위한 집단을 분리하기 위해서
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
library(party)
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
table(predict(iris_ctree), trainData$Species)
testPred <- predict(iris_ctree, newdata = testData)
table(testPred, testData$Species)
print(iris_ctree)
plot(iris_ctree)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
print(iris_ctree)
plot(iris_ctree)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
setwd("/Dropbox/201708_Miracom_ML/_data/")
stu=read.table("Student_Survey.csv",header=T ,fileEncoding = "EUC-KR")
myFormula <- 성별~필통+충전기+텀블러+노트북+책+파우치+지갑+안경집+치솔셋트+핸드크림+우산+향수+해드셋+차키+집키
iris_ctree <- ctree(myFormula, data=stu)
myFormula <- 성별~필통+충전기+텀블러+노트북+책+파우치+지갑+안경집+치솔셋트+핸드크림+우산+향수+해드셋+차키+집키
iris_ctree <- ctree(myFormula, data=stu)
stu
stu=read.csv("Student_Survey.csv",header=T ,fileEncoding = "EUC-KR")
myFormula <- 성별~필통+충전기+텀블러+노트북+책+파우치+지갑+안경집+치솔셋트+핸드크림+우산+향수+해드셋+차키+집키
iris_ctree <- ctree(myFormula, data=stu)
table(predict(iris_ctree), trainData$Species)
iris_ctree <- ctree(myFormula, data=stu)
print(stu_ctree)
stu_ctree <- ctree(myFormula, data=stu)
#결과 출력
print(stu_ctree)
plot(stu_ctree)
